import * as express from "express";
import { TYPE, METADATA_KEY } from "./constants";
/**
 * Wrapper for the express server.
 */
export var InversifyExpressServer = (function () {
    /**
     * Wrapper for the express server.
     *
     * @param kernel Kernel loaded with all controllers and their dependencies.
     */
    function InversifyExpressServer(kernel) {
        this.app = express();
        this.kernel = kernel;
    }
    /**
     * Sets the configuration function to be applied to the application.
     * Note that the config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level middleware can be registered.
     */
    InversifyExpressServer.prototype.setConfig = function (fn) {
        this.configFn = fn;
        return this;
    };
    /**
     * Sets the error handler configuration function to be applied to the application.
     * Note that the error config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level error handlers can be registered.
     */
    InversifyExpressServer.prototype.setErrorConfig = function (fn) {
        this.errorConfigFn = fn;
        return this;
    };
    /**
     * Applies all routes and configuration to the server, returning the express application.
     */
    InversifyExpressServer.prototype.build = function () {
        // register server-level middleware before anything else
        if (this.configFn) {
            this.configFn.apply(undefined, [this.app]);
        }
        this.registerControllers();
        // register error handlers after controllers
        if (this.errorConfigFn) {
            this.errorConfigFn.apply(undefined, [this.app]);
        }
        return this.app;
    };
    InversifyExpressServer.prototype.registerControllers = function () {
        var _this = this;
        var controllers = this.kernel.getAll(TYPE.Controller);
        controllers.forEach(function (controller) {
            var controllerMetadata = Reflect.getOwnMetadata(METADATA_KEY.controller, controller.constructor);
            var methodMetadata = Reflect.getOwnMetadata(METADATA_KEY.controllerMethod, controller.constructor);
            if (controllerMetadata && methodMetadata) {
                var router_1 = express.Router();
                methodMetadata.forEach(function (metadata) {
                    var handler = _this.handlerFactory(controllerMetadata.target.name, metadata.key);
                    router_1[metadata.method].apply(router_1, [metadata.path].concat(metadata.middleware, [handler]));
                });
                (_a = _this.app).use.apply(_a, [controllerMetadata.path].concat(controllerMetadata.middleware, [router_1]));
            }
            var _a;
        });
    };
    InversifyExpressServer.prototype.handlerFactory = function (controllerName, key) {
        var _this = this;
        return function (req, res, next) {
            var result = _this.kernel.getNamed(TYPE.Controller, controllerName)[key](req, res, next);
            // try to resolve promise
            if (result && result instanceof Promise) {
                result.then(function (value) {
                    if (value && !res.headersSent) {
                        res.send(value);
                    }
                })
                    .catch(function (error) {
                    next(error);
                });
            }
            else if (result && !res.headersSent) {
                res.send(result);
            }
        };
    };
    return InversifyExpressServer;
}());
