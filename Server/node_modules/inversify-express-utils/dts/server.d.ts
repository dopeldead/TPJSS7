/// <reference types="express" />
import * as express from "express";
import * as inversify from "inversify";
import interfaces from "./interfaces";
/**
 * Wrapper for the express server.
 */
export declare class InversifyExpressServer {
    private kernel;
    private app;
    private configFn;
    private errorConfigFn;
    /**
     * Wrapper for the express server.
     *
     * @param kernel Kernel loaded with all controllers and their dependencies.
     */
    constructor(kernel: inversify.interfaces.Kernel);
    /**
     * Sets the configuration function to be applied to the application.
     * Note that the config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level middleware can be registered.
     */
    setConfig(fn: interfaces.ConfigFunction): InversifyExpressServer;
    /**
     * Sets the error handler configuration function to be applied to the application.
     * Note that the error config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level error handlers can be registered.
     */
    setErrorConfig(fn: interfaces.ConfigFunction): InversifyExpressServer;
    /**
     * Applies all routes and configuration to the server, returning the express application.
     */
    build(): express.Application;
    private registerControllers();
    private handlerFactory(controllerName, key);
}
